using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;

namespace Alerting.Alert.Formatters
{
    public class Formatter
    {
        // {0} is message
        // {1} is exception message
        // {2} is exception stack trace
        //public string FormatBody(string bodyText, Exception exception, bool showDetails)
        //{
        //    string s ="";

        //    if (exception != null)
        //    {
        //        s = string.Format("{0}: {1}{2}{3}", bodyText, exception.ToString(), Environment.NewLine,exception.StackTrace);
        //    }
        //    else
        //    {
        //        s = string.Format("{0}", bodyText);
        //    }
        //    return s;
        //}

        public string FormatBody(string currentBodyText, IQueueItem queueItem, bool showDetails)
        {
            return FormatBody(currentBodyText, queueItem, false, showDetails);
        }

        //public string FormatBody(string currentBodyText, string bodyText, Exception exception, bool insert)
        public string FormatBody(string currentBodyText, IQueueItem queueItem, bool insert, bool  showDetails)
        {

            StringBuilder sb = new StringBuilder(500);

            if (insert)
            {
                //sb.Append(FormatBody(bodyText, exception));
                sb.Append(GetDisplayString(queueItem,showDetails));
                if (!string.IsNullOrEmpty(currentBodyText))
                {
                    sb.Append(Environment.NewLine);
                    sb.Append(currentBodyText);
                    
                }

                
            }
            else
            {
                if (!string.IsNullOrEmpty(currentBodyText))
                {
                    sb.Append(currentBodyText);
                    sb.Append(Environment.NewLine);
                }
                sb.Append(GetDisplayString(queueItem, showDetails));
            }

            return sb.ToString();
            
        }

        protected string GetDisplayString(IQueueItem queueItem, bool showDetails)
        {
            string result = queueItem.DisplayString;

            if (showDetails)
            {
                result = queueItem.DisplayDetailedString;
            }

            return result;
        }

        public string FormatErrorBody(string message, Exception exception, bool showDetails)
        {
            string s = "";

            if (exception != null && showDetails)
            {
                s = string.Format(@"Error Message: 
{0}

Details:
{1}{2}{3}", message, exception.ToString(), Environment.NewLine,exception.StackTrace);


            }
            else
            {
                s = string.Format(@"Error Message:
{0}", message);

            }
            return s;
        }


        public virtual string BuildProcessInfo(bool isHTML)
        {
            StringBuilder results = new StringBuilder(400);

            if (isHTML)
            {
                results.Append("<p> <font size=\"-2\"> Email generated by Machine: ");

                results.Append(System.Environment.MachineName);

                results.Append(" Process: ");
                results.Append(Process.GetCurrentProcess().ProcessName);
                results.Append(" </font></p>");
            }
            else
            {
                results.Append("Email generated by Machine: ");
                results.Append(System.Environment.MachineName);

                results.Append(" Process: ");
                results.Append(Process.GetCurrentProcess().ProcessName);
            }
            return results.ToString();

        }

    }
}
